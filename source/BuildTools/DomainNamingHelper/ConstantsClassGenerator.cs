using System.Text;

namespace DomainNamingHelper;

public class ConstantsClassGenerator
{
    public string GenerateConstantsClass(string dataObjectTypeName, string namespaceName, string layerName, string generatorComment)
    {
        var sb = new StringBuilder();
        Func<string, string> cSharpSafe = (dataObjectTypeName) => dataObjectTypeName.Replace(".", "_").Replace("-", "_");

        sb.AppendLine( "// <auto-generated>");
        sb.AppendLine($"// {generatorComment}");
        sb.AppendLine( "// </auto-generated>");
        sb.AppendLine();

        sb.AppendLine($"namespace {namespaceName}");
        sb.AppendLine( "{");
        sb.AppendLine("    public static partial class IngestionChangeQueueNames");
        sb.AppendLine("    {");
        sb.AppendLine($"        public const string {cSharpSafe(dataObjectTypeName)} = \"{layerName.ToLower()}-{dataObjectTypeName}-change\";");
        sb.AppendLine("    }");

        sb.AppendLine("    public static partial class IngestionFullbatchQueueNames");
        sb.AppendLine("    {");
        sb.AppendLine($"        public const string {cSharpSafe(dataObjectTypeName)} = \"{layerName.ToLower()}-{dataObjectTypeName}-fullbatch\";");
        sb.AppendLine("    }");

        sb.AppendLine();
        sb.AppendLine("    public static partial class SchemaPaths");
        sb.AppendLine( "    {");
        sb.AppendLine($"        public const string {cSharpSafe(dataObjectTypeName)} = \"{layerName}/{dataObjectTypeName}-schema.json\";");
        sb.AppendLine( "    }");

        sb.AppendLine();
        sb.AppendLine($"    public static partial class DataObjectTypeNames");
        sb.AppendLine( "    {");

        sb.AppendLine($"        public const string {cSharpSafe(dataObjectTypeName)} = \"{dataObjectTypeName}\";");

        sb.AppendLine( "    }");
        sb.AppendLine( "}");

        return sb.ToString();
    }
}