name: Push Deploy workflow

on:
  push:
    branches:
      - main
      - develop
      - hotfix/*
      - "**" # Catch-all for other branches

jobs:
  build-deploy:
    name: Build and deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load environment variables
        uses: ./.github/actions/loadEnvVariables

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Authenticate with GitHub Packages
        run: |
          echo "Nuget feed URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          echo "Nuget user: $secrets_DIH_FAIR_PACKAGES_PAT_user"
          echo "Secret length: ${#DIH_FAIR_PACKAGES_PAT}"

          dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
            --name github \
            --username $secrets_DIH_FAIR_PACKAGES_PAT_user \
            --password ${{ secrets.DIH_FAIR_PACKAGES_PAT }} \
            --store-password-in-clear-text            
          dotnet nuget list source
        env:
          DIH_FAIR_PACKAGES_PAT: ${{ secrets.DIH_FAIR_PACKAGES_PAT }}

      - name: Define nuget package project list from variable packageList
        id: define-projects
        run: |
          IFS=',' read -r -a projects <<< "$packageList"
          echo "projects=${projects[@]}" >> $GITHUB_ENV
          echo "${projects[@]}"

      - name: Restore dependencies
        run: |
          for project in ${projects[@]}; do
            echo "Restoring dependencies for $project"
            dotnet restore ./Source/$project/$project.csproj
          done

      - name: Generate Domain Classes
        uses: ./.github/actions/generateDomainClasses
        with:
          domainobjects_file_path: './Source/Schemas/domain-objects.yml'

      - name: Build and Pack Projects
        run: |
          for project in ${projects[@]}; do
            echo "Building and Packing $project"
            dotnet build ./Source/$project/$project.csproj --configuration Release --output output/$project
            dotnet pack ./Source/$project/$project.csproj --configuration Release --output output/$project -p:PackageVersion=${{ env.packageVersion }}
          done

      - name: Publish NuGet Packages
        run: |
          for project in ${projects[@]}; do
            for package in output/$project/*.nupkg; do
              echo "Publishing $package"
              dotnet nuget push "$package" \
                --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
                --api-key ${{ secrets.DIH_FAIR_PACKAGES_PAT }} \
                --skip-duplicate
            done
          done

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Dependencies
        run: |
          npm install js-yaml

      - name: Transform YAML to JSON
        run: |
          node ./Source/BuildTools/transform-yaml-to-json.js ./Source/Schemas/domain-objects.yml ./Source/IaC/domain-objects-iac-map.json

      - name: Verify JSON Output
        run: |
          cat ./Source/IaC/domain-objects-iac-map.json


      - name: Set Azure Credentials Secret Based on Environment
        id: set-azure-credentials
        run: |
          if [[ "$environment" == "prod" ]]; then
            echo "AZURE_CREDENTIALS<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.DIH_FAIR_AZURE_CREDENTIALS_PROD }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [[ "$environment" == "test" ]]; then
            echo "AZURE_CREDENTIALS<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.DIH_FAIR_AZURE_CREDENTIALS_TEST }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "AZURE_CREDENTIALS<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.DIH_FAIR_AZURE_CREDENTIALS_DEV }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: $AZURE_CREDENTIALS

      - name: Deploy Infrastructure
        run: |
          resourceGroupName="$commonResourceGroupName"

          echo "Deploying Resource Group..."
          az group create \
            --name $resourceGroupName \
            --location $resourceLocation \
            --tags $tags

          echo "Deploying Resources..."
          az deployment group create \
            --resource-group $resourceGroupName \
            --template-file ./Source/IaC/main.bicep \
            --parameters \
              applicationName=$applicationName \
              location=$resourceLocation \
              env=$environment \
              postfixCount=$postfixCount \
              tags="$tags" \
              uniqueDeployId=$uniqueDeployId \
              domainObjectsJson="$(cat ./Source/IaC/domain-objects-iac-map.json)"
          
          echo "Assigning Developer Permissions..."
          az deployment group create \
            --resource-group $resourceGroupName \
            --template-file ./Source/IaC/dev-permissions.bicep \
            --parameters \
              developerAccessAadGroupId=$developerAccessAadGroupId \
              applicationName=$applicationName \
              env=$environment \
              postfixCount=$postfixCount \
              uniqueDeployId=$uniqueDeployId

      # - name: Log in to Azure
      #   uses: azure/login@v1
      #   with:
      #     creds: $DIH_FAIR_AZURE_CREDENTIALS

      # - name: Ensure Resource Group Exists and Deploy Resources
      #   run: |
      #     echo ">>> Using variable LOCATION: $resourceLocation"
      #     # Ensure the resource group exists
      #     az group create --name MARWTESTFROMGITHUB --location $resourceLocation

      #     # Deploy the resources using the Bicep file
      #     az deployment group create \
      #       --resource-group MARWTESTFROMGITHUB \
      #       --template-file ./source/IaC/main.bicep
