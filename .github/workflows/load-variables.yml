name: Validate and Load Variables

on:
  workflow_call:
    inputs:
      variables_dir:
        required: true
        type: string
      branch:
        required: true
        type: string

permissions:
  contents: read

jobs:
  load-variables:
    runs-on: ubuntu-latest

    steps:
    - name: Validate and Load Variables
      run: |
        echo ">>>>>> START:"
        echo "Loading variables from ${{ inputs.variables_dir }} for branch ${{ inputs.branch }}"
        
        # Print current directory
        echo "Current directory: $(pwd)"
        
        # Evaluate and check the passed-in variables_dir
        evaluated_dir="${{ inputs.variables_dir }}"
        echo "Evaluated variables_dir: $evaluated_dir"
        if [ -d "$evaluated_dir" ]; then
          echo "Directory exists: $evaluated_dir"
        else
          echo "Error: Directory does not exist: $evaluated_dir"
          exit 1
        fi

        # Validate all JSON files in the directory
        echo "Validating all JSON files in $evaluated_dir..."
        for file in $evaluated_dir/*.json; do
          echo "Checking $file..."
          if ! jq empty "$file"; then
            echo "Error: Invalid JSON file detected: $file"
            exit 1
          fi
        done
        echo "All JSON files are valid."

        # Initialize a temporary file for logging variables
        temp_env_file=$(mktemp)
        matched=false
        
        # Process JSON files
        for file in $evaluated_dir/*.json; do
          echo "Processing $file..."
          
          # Debug: Show content of the JSON file
          echo "Contents of $file:"
          cat "$file"

          # Debug: List branches in the file
          echo "Branches in $file:"
          jq -r '.branches[]' "$file"

          # Generate regex patterns and test matching
          jq_output=$(jq -r --arg branch "${{ inputs.branch }}" '
            .branches[] |
            {
              branch_name: $branch,
              regex: "^" + (. | gsub("\\*"; ".*")) + "$",
              debug: {branch_name: $branch, regex_test: "^" + (. | gsub("\\*"; ".*")) + "$"},
              is_match: $branch | test("^" + (. | gsub("\\*"; ".*")) + "$")
            }' "$file")

          # Debug: Output the raw jq result
          echo "Raw jq output: $jq_output"

          # Skip if no matches
          if [ -z "$jq_output" ]; then
            echo "No match results found in $file. Skipping..."
            continue
          fi

          # Process each match result
          echo "$jq_output" | jq -c '.' | while IFS= read -r result; do
            echo "Processing match result: $result"
            branch_name=$(echo "$result" | jq -r '.branch_name')
            regex=$(echo "$result" | jq -r '.regex')
            debug=$(echo "$result" | jq -r '.debug')
            is_match=$(echo "$result" | jq -r '.is_match')
            
            # Log detailed matching logic
            echo "  Debug info: Branch='$branch_name', Regex='$regex', Match='$is_match'"
            echo "  Regex Test: $debug"
            
            if [ "$is_match" == "true" ] && [ "$matched" == "false" ]; then
              echo "  Branch '$branch_name' matches file: $file"
              jq -r '.variables | to_entries[] | "VAR_\(.key|ascii_upcase)=\(.value)"' "$file" >> "$temp_env_file"
              matched=true
              break
            fi
          done

          # Stop processing other files once a match is found
          if [ "$matched" == "true" ]; then
            echo "Match found. Skipping remaining files."
            break
          fi
        done
        
        # Output the loaded variables
        echo "Loaded variables:"
        cat "$temp_env_file" | while read -r line; do
          name=$(echo "$line" | cut -d'=' -f1)
          value=$(echo "$line" | cut -d'=' -f2-)
          echo "  $name=$value"
        done

        # Append variables to GITHUB_ENV
        cat "$temp_env_file" >> $GITHUB_ENV
        rm "$temp_env_file"  # Clean up temporary file
        echo "<<<<< END"
