name: Load Variables from JSON Files

on:
  workflow_call:
    inputs:
      variables_dir:
        required: true
        type: string
      branch:
        required: true
        type: string

permissions:
  contents: read

jobs:
  load-variables:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # Ensure the repository is checked out

    - name: Validate and Load Variables
      run: |
        echo ">>>>>> START:"
        echo "Loading variables from ${{ inputs.variables_dir }} for branch ${{ inputs.branch }}"
        
        # Print current directory
        echo "Current directory: $(pwd)"
        
        # Evaluate and check the passed-in variables_dir
        evaluated_dir="${{ inputs.variables_dir }}"
        echo "Evaluated variables_dir: $evaluated_dir"
        if [ -d "$evaluated_dir" ]; then
          echo "Directory exists: $evaluated_dir"
        else
          echo "Error: Directory does not exist: $evaluated_dir"
          exit 1
        fi

        # Validate all JSON files in the directory
        echo "Validating all JSON files in $evaluated_dir..."
        for file in $evaluated_dir/*.json; do
          echo "Checking $file..."
          if ! jq empty "$file"; then
            echo "Error: Invalid JSON file detected: $file"
            exit 1
          fi
        done
        echo "All JSON files are valid."

        # Initialize a temporary file for logging variables
        temp_env_file=$(mktemp)
        matched=false
        
        # Process JSON files
        for file in $evaluated_dir/*.json; do
          echo "Processing $file..."
          
          # Debug: Show content of the JSON file
          echo "Contents of $file:"
          cat "$file"

          # Debug: List branches in the file
          echo "Branches in $file:"
          jq -r '.branches[]' "$file"

          # Step 1: Generate branch_name and regex struct
          regex_structs=$(jq -c --arg branch "${{ inputs.branch }}" '
            .branches[] |
            {
              branch_name: $branch,
              regex: ("^" + . | gsub("\\*"; ".*") + "$")
            }' "$file" 2>/dev/null)

          # Check for jq errors
          if [ $? -ne 0 ]; then
            echo "Error: Failed to generate regex structs. Skipping file: $file"
            continue
          fi

          # Debug: Output the regex structs
          echo "Generated regex structs:"
          echo "$regex_structs" | while IFS= read -r struct; do
            echo "  $struct"
          done

          # Check if regex_structs is empty
          if [ -z "$regex_structs" ]; then
            echo "Error: No valid regex structures generated. Skipping file: $file"
            continue
          fi

          echo "1:"
          
          # Debug: Output regex_structs before match testing
          echo "Debug: regex_structs before match testing:"
          echo "$regex_structs" | while IFS= read -r struct; do
            echo "  $struct"
          done
          
          # Step 2: Test each regex against the branch name
          match_results=$(echo "$regex_structs" | jq -c --arg branch "${{ inputs.branch }}" '
            . |
            {
              branch_name: .branch_name,
              regex: .regex,
              debug: ("Testing branch '" + $branch + "' against regex '" + .regex + "'"),
              is_match: ($branch | test(.regex))
            }' 2>&1) # Capture stderr for debugging

          # Debug: Output any errors from jq
          echo "Debug: match_results jq command output:"
          echo "$match_results"

          # Check for jq errors
          if echo "$match_results" | grep -q "jq: error"; then
            echo "Error: Failed to test regex matches. Output:"
            echo "$match_results"
            exit 5
          fi

          echo "2:"

          # Check for jq errors
          if [ $? -ne 0 ]; then
            echo "Error: Failed to test regex matches. Skipping file: $file"
            continue
          fi

          # Debug: Output the match results
          echo "Match results:"
          echo "$match_results" | while IFS= read -r result; do
            echo "  $result"
          done

          # Process match results
          echo "$match_results" | jq -c '.' | while IFS= read -r result; do
            branch_name=$(echo "$result" | jq -r '.branch_name')
            regex=$(echo "$result" | jq -r '.regex')
            debug=$(echo "$result" | jq -r '.debug')
            is_match=$(echo "$result" | jq -r '.is_match')

            # Log detailed matching logic
            echo "Processing match result: $result"
            echo "  Debug info: $debug"
            echo "  Match result: Branch='$branch_name', Regex='$regex', Is Match='$is_match'"

            if [ "$is_match" == "true" ] && [ "$matched" == "false" ]; then
              echo "  Branch '$branch_name' matches file: $file"
              jq -r '.variables | to_entries[] | "VAR_\(.key|ascii_upcase)=\(.value)"' "$file" >> "$temp_env_file"
              matched=true
              break
            fi
          done

          # Stop processing other files once a match is found
          if [ "$matched" == "true" ]; then
            echo "Match found. Skipping remaining files."
            break
          fi
        done
        
        # Output the loaded variables
        echo "Loaded variables:"
        cat "$temp_env_file" | while read -r line; do
          name=$(echo "$line" | cut -d'=' -f1)
          value=$(echo "$line" | cut -d'=' -f2-)
          echo "  $name=$value"
        done

        # Append variables to GITHUB_ENV
        cat "$temp_env_file" >> $GITHUB_ENV
        rm "$temp_env_file"  # Clean up temporary file
        echo "<<<<< END"
