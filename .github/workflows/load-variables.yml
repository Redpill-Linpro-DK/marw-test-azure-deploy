name: Load Variables from JSON Files

on:
  workflow_call:
    inputs:
      variables_dir:
        required: true
        type: string
      branch:
        required: true
        type: string

permissions:
  contents: read

jobs:
  load-variables:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # Ensure the repository is checked out

    - name: Load Variables
      run: |
        echo ">>>>>> START:"
        echo "Loading variables from ${{ inputs.variables_dir }} for branch ${{ inputs.branch }}"
        
        # Print current directory
        echo "Current directory: $(pwd)"
        
        # Evaluate and check the passed-in variables_dir
        evaluated_dir="${{ inputs.variables_dir }}"
        echo "Evaluated variables_dir: $evaluated_dir"
        if [ -d "$evaluated_dir" ]; then
          echo "Directory exists: $evaluated_dir"
        else
          echo "Error: Directory does not exist: $evaluated_dir"
          exit 1
        fi

        # Initialize a temporary file for logging variables
        temp_env_file=$(mktemp)
        
        # Process JSON files
        for file in $evaluated_dir/*.json; do
          echo "Processing $file..."
          
          # Debug: List branches in the file
          echo "Branches in $file:"
          jq -r '.branches[]' "$file"

          # Generate regex patterns and test matching
          jq -r --arg branch "${{ inputs.branch }}" '
            .branches[] |
            {
              branch_name: $branch,
              regex: "^" + (. | gsub("\\*"; ".*")) + "$",
              is_match: test("^" + (. | gsub("\\*"; ".*")) + "$")
            }
          ' "$file" | while IFS= read -r result; do
            regex=$(echo "$result" | jq -r '.regex')
            is_match=$(echo "$result" | jq -r '.is_match')
            echo "  Testing branch '${{ inputs.branch }}' against regex '$regex' -> Match: $is_match"
            
            if [ "$is_match" == "true" ]; then
              echo "  Branch '${{ inputs.branch }}' matches file: $file"
              jq -r '.variables | to_entries[] | "VAR_\(.key|ascii_upcase)=\(.value)"' "$file" >> "$temp_env_file"
              break
            fi
          done
        done
        
        # Output the loaded variables
        echo "Loaded variables:"
        cat "$temp_env_file" | while read -r line; do
          name=$(echo "$line" | cut -d'=' -f1)
          value=$(echo "$line" | cut -d'=' -f2-)
          echo "  $name=$value"
        done

        # Append variables to GITHUB_ENV
        cat "$temp_env_file" >> $GITHUB_ENV
        rm "$temp_env_file"  # Clean up temporary file
        echo "<<<<< END"
